doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title Top-Level Awaiting for Godot

    link(rel='stylesheet', type='text/css', href='build/build.css')

  style.
    .hello {
      background-image: url('images/hello-tharr.gif')
    }
    .graph {
      background-image: url('images/graph.jpg')
    }
    .pre-one {
      background-image: url('images/graph-preorder-1.jpg')
    }
    .pre-two {
      background-image: url('images/graph-preorder-2.jpg')
    }
    .pre-three {
      background-image: url('images/graph-preorder-3.jpg')
    }
    .pre-four {
      background-image: url('images/graph-preorder-4.jpg')
    }
    .pre-five {
      background-image: url('images/graph-preorder-5.jpg')
    }
    .post-one {
      background-image: url('images/graph-postorder-1.jpg')
    }
    .post-two {
      background-image: url('images/graph-postorder-2.jpg')
    }
    .post-three {
      background-image: url('images/graph-postorder-3.jpg')
    }
    .post-four {
      background-image: url('images/graph-postorder-4.jpg')
    }
    .post-five {
      background-image: url('images/graph-postorder-5.jpg')
    } 
    .godot {
      background-image: url('images/godot-waiting.gif')
    }
    .dontstop {
      background-image: url('images/dontstop.jpg')
    }
    .cant-do {
      background-image: url('images/cant-do.gif')
    }
    .tiny-flip {
      background-image: url('images/tiny-flip.gif')
    }
    .data-pat {
      background-image: url('images/data-pat.gif')
    }
    .anyone {
      background-image: url('images/anyone.gif')
    }
    .warp {
      background-image: url('images/warp.gif')
    }
    .newyear {
      background-image: url('images/newyear.gif')
    }
    .land-before {
      background-image: url('images/land-before.gif')
    }
    .promise {
      background-image: url('images/promise.gif')
    }
    .history {
      background-image: url('images/history.gif')
    }
    .moonwalk {
      background-image: url('images/moonwalk.gif')
    }
    .drive {
      background-image: url('images/drive.gif')
    }
    .cyber-punk {
      background-image: url('images/cyber-punk.gif')
    }
    .hatch {
      background-image: url('images/egg.gif')
    }

  body

    article

      section(data-bespoke-backdrop='godot')
        h2 Top-Level Awaiting
        h2 For Godot
        h3 With your host
        h4
          a(href='https://twitter.com/MylesBorins') @MylesBorins
        p  ColdFront 2018
        
      section(data-bespoke-backdrop='hello')
        h1 Hej!
        
      section
        h1 My Name is Myles
        img.headroom(src='images/me.jpg' alt='itsa me!' width='200px' height='200px')
      
      section
        h3 I am gainfully employed by Google as a Developer Advocate
        h4 Focusing on the Node.js ecosystem and GCP
        
        img(src='images/gcp.png' alt='Google Cloud Platform' style='background-color:white;')
        
        h5.headroom The opinions expressed in this talk are solely my own

      section
        h1 Chapter One

      section(data-bespoke-backdrop='data-pat')
        h2 Asynchronicity
        h2 is hard

      section(data-bespoke-backdrop='dontstop')
        h2 Don't stop,
        h2 don't stop the thread

      section(data-bespoke-backdrop='land-before')
        h3 From the beginning of time (1995)
        h2 We had callbacks in JavaScript

      section.small-code
        pre
          code.language-javascript.
            a((aa) => {
                b(aa, (bb) => {
                    c(bb, (cc) => {
                        d(cc, (dd) => {
                            e(dd, (OMG) => {
                                throw 'me into the abyss';
                            });
                        });
                    });
                });
            });

      section(data-bespoke-backdrop='promise')
        h2 Promises 
        h3 Made it into the language ~20 years later in 2014

      section.small-code
        pre
          code.language-javascript.
            a.then((aa) => {
              return b(aa);
            }),then((bb) => {
              return c(bb);
            }).then((cc) => {
              return d(cc);
            }).then((OMG) => {
              throw 'me into the abyss';
            }).catch((e) => {
              console.log('I got chu bae');
            });

      section
        h2 Async / Await
        h3 Arrived in December of 2016

      section.small-code
        pre
          code.language-javascript.
            (async function main () {
              try {
                const aa = await a();
                const bb = await b(aa);
                const cc = await c(bb);
                const OMG = await d(cc);
                throw 'me into the absyss';
              }
              catch (e) {
                console.log('never mind');
              }
            }());

      section
        h2 A Practical Example

      section
        h1 Callbacks

      section.small-code
        pre
          code.language-javascript.
            request('https://nodejs.org/download/release/index.json', {
              json: true
            }, function (error, response, body) {
              if (error) {
                console.error(error);
                return
              }
              body.sort(sortDate);
              const {version, date} = body[0];
              console.log(`The latest release of node is ${version}.\n`
                + `It was released on ${date}.`);
            });

      section
        h1 Promises

      section.small-code
        pre
          code.language-javascript.
            fetch('https://nodejs.org/download/release/index.json')
              .then(response => response.json())
              .then(json => {
                json.sort(sortDate);
                const {version, date} = json[0];
                console.log(`The latest release of node is ${version}.\n`
                  + `It was released on ${date}.`);
              })
              .catch(e => console.error(e));

      section
        h1 Async / Await

      section.small-code
        pre
          code.language-javascript.
            async function main () {
              const response =
                await fetch('https://nodejs.org/download/release/index.json');
              const json = await response.json();
              json.sort(sortDate);
              const {version, date} = json[0];
              console.log(`The latest release of node is ${version}.\n`
                + `It was released on ${date}.`);
            }

            main()
              .catch(e => console.error(e));

      section
        h1 Top-Level Await

      section.small-code
        pre
          code.language-javascript.
            const response =
              await fetch('https://nodejs.org/download/release/index.json');
            const json = await response.json();
            json.sort(sortDate);
            const {version, date} = json[0];
            console.log(`The latest release of node is ${version}.\n`
              + `It was released on ${date}.`);

      section
        h1 Chapter Two

      section(data-bespoke-backdrop='cant-do')
        h2 Don't tell me
        h2 what I can't do
      
      section
        h2 February 21 2017
        h3 Node.js 7.6.0 is release
        h4 It includes V8 5.5
        h3 which has support for async / await

      section
        h2 I was really excited to use await until...

      section
        img.headroom(src="images/throw.png" alt="error message when trying to use Top-Level Await today"  width='60%')

      section(data-bespoke-backdrop='tiny-flip')

      section
        h3 It looked like
        h2 Top-Level Await
        h3 Wasn't a thing

      section
        h2 May 31 2017
        h3 My First attempt to make TLA work in node
        img.headroom(src="images/first-attempt.png" alt="a naive node patch to make TLA work that broke everything"  width='40%')

      section
        h2 Spoiler: It Didn't

      section
        h2 It turned out that the Node.js test suite
        h3 Wasn't the only place that had an issue
        h2 With Top-Level Await

      section
        h1 Chapter Three

      section
        h2 Top-Level Await
        h2 is a footgun ðŸ‘£ðŸ”«

      section
        img(src='images/footgun.png', alt='definition of a footgun' width='80%')

      section
        h3 In September of 2016
        h2 Rich Harris wrote
        h3 Top-Level Await is a footgun
        h3
          a(href="https://gist.github.com/Rich-Harris/0b6f317657f5167663b493c722647221") https://gist.github.com/Rich-Harris/0b6f317657f5167663b493c722647221

      section
        h3 a gist that would be brought up whenever i mentioned
        h2 Top-Level Await

      section
        h2 TL;DR
        ul
          li.hide
          li Top-Level Await could block execution
          li Top-Level Await could block fetching resources
          li The would be no clear interop story for common.js
          li Circular dependencies could introduce deadlock

      section
        h3 In late 2017 Top-Level Await was still a contencious topic
        h2 But I wasn't ready to give up

      section
        h1 Chapter Four

      section(data-bespoke-backdrop='history')
        h2 A history lesson

      section
        h3 The first thing to do was review the agendas of past TC39 meetings
        h4
          a(href="http://github.com/tc39/agendas/") http://github.com/tc39/agendas/

      section
        h2 Despite the strong critique
        h3 There was no prior decision from TC39 regarding Top-Level Await

      section
        h3 async / await at TC39
        h2 Greatest Hits
        ul
          li.hide
          li originally brought to TC39 in January of 2014
          li In April 2014 `await` keyword was reserved in the module goal
          li July 2015 `async` / `await` moved to stage two
          li it was decided to delay decision about Top-Level Await at that time

      section
        h2 Top-Level Await was always being considered
        h3 while async / await was being standardized

      section(data-bespoke-backdrop='moonwalk')
        h2 taking a step back
      
      section
        img(src='images/babby.jpg' alt='how is language babby formed')

      section
        h3 The Spec is
        h2 ECMA-262

      section
        h3 The Committee who implements it is
        img.headroom(src='images/tc39.png' alt='logo for tc39')

      section
        h3 The committee meets
        h2 every other month
        h3 At locations around the world

      section
        h2 The participants include
        ul
          li.hide
          li Major Browser Vendors
          li Academics
          li Industry Experts
          li Open Source Maintainers
          li Maybe you?

      section(data-bespoke-backdrop='anyone')
        h1 Can Anyone Join?

      section
        h1 What is a Member?

      section
        h1 What is a Delegate?

      section
        h1 How does a feature get developed?

      section
        h1 Consensus

      section
        h2 The Stages
        li.hide
        li Stage 0: strawman
        li Stage 1: proposal
        li Stage 2: draft
        li Stage 3: candidate
        li Stage 4: finished

      section
        h1 Chapter Five
      
      section
        h2 A footgun in the door

      section(data-bespoke-backdrop='hatch')
        //-image source: https://www.deviantart.com/kirokaze/art/Digital-Egg-628390825
        h2 So I hatched a plan

      section
        h3 If I brought Top-Level Await to TC39
        h2 We could get some sort of decision
        h3 and stop all the arguments once and for all!

      section
        h3 In January 2018
        h2.slim Top-Level Await was brought to TC39
        h3 Attempting for Stage 1

      section
        h2 The proposal included
        ul
          li.hide
          li History of TLA
          li Motivation for the feature
          li Use Cases
          li Potential Implementations
          li Constraints

      section
        h3 Motivation #1
        h2 IIAFE
        h6.headroom Immediately invoked async function expression

      section.small-code
        pre
          code.language-javascript.
            import static1 from './static1.mjs';
            import { readFile } from 'fs';

            (async () => {
              const dynamic = await import('./dynamic'
                + process.env.something + '.mjs');
              const file = JSON.parse(await readFile('./config.json'));
              // main program goes here...
            })();

      section
        h3 Motivation #2
        h2 Completely Async Modules
        
      section.small-code
        pre
          code.language-javascript.
            export default async () => {
              // import other modules like this one
              const import1 = await (await import('./import1.mjs')).default();
              const import2 = await (await import('./import2.mjs')).default();

              // compute some exports...
              return {
                export1: ...,
                export2: ...
              };
            };

      section
        h1 Use Cases
      
      section
        h3 Dynamic dependency pathing
        pre
          code.language-javascript.
            export const strings =
              await import(`/i18n/${navigator.language}`);
      
      section
        h3 Resource initialization
        pre
          code.language-javascript.
            const connection = await dbConnector();
      section
        h3 Dependency fallbacks
        pre
          code.language-javascript.
            let jQuery;
            try {
              jQuery = await import('https://cdn-a.com/jQuery');
            } catch {
              jQuery = await import('https://cdn-b.com/jQuery');
            }

      section
        h1 Potential Solutions

      section
        h2 Variant A
        h3.slim A call to Top-Level Await would block execution of the graph until it had resolved.

      section
        h2 Assuming A, B, C
        h3 each have a Top-Level Await call in their bodies
        pre
          code.language-javascript.
            import a from './a.mjs'
            import b from './b.mjs'
            import c from './c.mjs'

            console.log(a, b, c);

      section
        h2 The code is equivalent to
        pre
          code.language-javascript.
            (async () => {
              const a = await import('./a.mjs');
              const b = await import('./b.mjs');
              const c = await import('./c.mjs');
  
              console.log(a, b, c);
            })();

      section
        h2 Variant B
        h3.slim A call to Top-Level Await would block execution of parent nodes in the graph but would allow siblings to continue to execute.

      section
        h2 Assuming A, B, C
        h3 each have a Top-Level Await call in their bodies
        pre
          code.language-javascript.
            import a from './a.mjs'
            import b from './b.mjs'
            import c from './c.mjs'

            console.log(a, b, c);

      section
        h2 The code is equivalent to
        pre
          code.language-javascript.
            (async () => {
              const [a, b, c] = await Promise.all([
                import('./a.mjs'),
                import('./b.mjs'),
                import('./c.mjs')
              ]);
              console.log(a, b, c);
            })();

      section
        h2 Optional Constraint
        h3.headroom Enforcing that Top-Level Await could only be used inside of a module without exports.

      section
        img(src="images/loading.gif" alt="Please wait... loading")

      section
        h3 ESModules specify
        h2 Asynchronous Load
        h2 +
        h2 Synchronous Execution

      section
        h2 Load
        ul
          li.hide
          li Fetch source texts for *all* the module graph
          li Resolve specifiers within source texts

      section
        h2 Link
        ul
          li.hide
          li Module Graph must be in memory
          li Executed in pre-order traversal (Root, Left, Right)

      section(data-bespoke-backdrop='graph')
        //- img.headroom(src='images/graph.jpg' alt='A graph. Root depends on A and B. A depends on C and D.' width='60%')

      section(data-bespoke-backdrop='pre-one')
        //- img.headroom(src='images/graph-preorder-1.jpg' alt='first node travelled to' width='60%')
      section(data-bespoke-backdrop='pre-two')
        //- img.headroom(src='images/graph-preorder-2.jpg' alt='second node travelled to' width='60%')
      section(data-bespoke-backdrop='pre-three')
        //- img.headroom(src='images/graph-preorder-3.jpg' alt='third node travelled to' width='60%')
      section(data-bespoke-backdrop='pre-four')
        //- img.headroom(src='images/graph-preorder-4.jpg' alt='fourth node travelled to' width='60%')
      section(data-bespoke-backdrop='pre-five')
        //- img.headroom(src='images/graph-preorder-5.jpg' alt='fifth node travelled to' width='60%')
      section
        h2 Execution
        ul
          li.hide
          li Requires linked be completed
          li Done in post-order traversal (Left, Right, Root)

      section(data-bespoke-backdrop='graph')
      section(data-bespoke-backdrop='post-one')
      section(data-bespoke-backdrop='post-two')
      section(data-bespoke-backdrop='post-three')
      section(data-bespoke-backdrop='post-four')
      section(data-bespoke-backdrop='post-five')

      section
        img(src="images/loading.gif" alt="Please wait... loading")

      section
        h2 Variant A
        h3.slim A call to Top-Level Await would block execution of the graph until it had resolved.

      section(data-bespoke-backdrop='post-five')

      section
        h2 Variant B
        h3.slim A call to Top-Level Await would block execution of parent nodes in the graph but would allow siblings to continue to execute.

      section(data-bespoke-backdrop='post-five')

      section
        h2 Optional Constraint
        h3.headroom Enforcing that Top-Level Await could only be used inside of a module without exports.

      section
        h2 Constraints were identified
        ul
          li.hide
          li Variant A would halt progress in the module graph until resolved
          li Variant B would halt progress but not block siblings execution
          li The optional constraint would limit the above concerns
          li Circular dependencies could introduce deadlock
          
      section
        h3 There are existing ways to halt progress in JavaScript
        
      section
        h3 Infinite Loops
        pre
          code.language-javascript.
            for (const n of primes()) {
              console.log(`${n} is prime}`);
            }
      
      section
        h3 Infinite Recursion
        pre
          code.language-javascript.
            const fibb = n => (n ? fibb(n - 1) : 1);
            fibb(Infinity);

      section
        h3 Atomics.wait
        pre
          code.language-javascript.
            Atomics.wait(shared_array_buffer, 0, 0);
        h6 Atomics allow blocking forward progress by waiting on an index that never changes
      
      section
        h3 As there are already ways to halt progress
        h2 It wasn't deemed a strong enough reason
        h3 To block Stage 1
      
      section
        h3 We punted on
        h2 Deadlock

      section
        h3 Achievement unlocked
        h2 Top-Level Await
        h2 was moved to Stage 1

      section
        h1 Chapter Six
      
      section(data-bespoke-backdrop='drive')
        h3 The Road
        h2 To Stage 2

      section
        h3 Reaching stage 1 was a big step
        h2 It signaled that TC39 was interested
        h3 In exploring the problem space of TLA

      section
        h3 Moving to stage 2 requires reaching consensus
        h2 On the general shape of the solution to the problem

      section
        h2 We identified necessary
        h2 spec changes

      section
        h3 When your ESM code is executed
        h2 It is represented
        h3 as a graph of
        h2 Module Records

      //- section
      //-   h3 A Source Text Module Record is used to represent information about a module that was defined from ECMAScript source text that was parsed using the goal symbol Module.

      section(data-bespoke-backdrop='post-five')

      section
        h3 ECMA262 defines how this graph is represented in memory
        h2 and the algorithm for executing the graph

      section
        iframe(src="/spec/" style="background:white;" heigh="100%")

      section
        h3 this algorithm supports Variant A
        h2 A spec level Promise.all would add support
        h3 for Variant B

      section
        h3 as such we were able to defer
        h2 making a decision
        h2 on A versus B
        h3 Unblocking Objections to either semantics

      section
        h3 We clarified that the feature would only be supported
        h2 In the module goal
        h3 Unblocking objections about interoperability

      section
        h3 We deferred to current behavior
        h2 For handling deadlock
        h3 Unblocking objections related to cycles

      section
        h3 In may of 2018
        h2 Top-Level Await
        h2 went to stage 2

      section
        h1 Chapter Seven

      section(data-bespoke-backdrop='cyber-punk')
        h2 What's next?

      section
        h3 I want to move forward
        h2 With Variant B
        h3 We need to build consensus around these semantics

      section
        h3 We are going through a variety of examples
        h2 To define semantics for deadlock
        h3 The intent is to make things fail early and obviously

      section
        h3 We need to finish writing the spec text
        h2 The text then needs to be reviewed and approved

      section
        h2 ETA, Â¯\_(ãƒ„)_/Â¯
        pre
          code.language-javascript.
            const [you, me] = Promise.all([
              await topLevelAwait('patience')
              await topLevelAwait('persistence');
            ]);


      section
        h2 Thank You
        img.headroom(src='images/best-gif-evar.gif' alt='a surfing puppy' width='20%')
        h4 @MylesBorins

    script(src='build/build.js')
